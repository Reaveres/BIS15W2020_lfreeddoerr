knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages("seqinr")
#install.packages("ape")
library(ape)
library(seqinr)
?read.GenBank()
dengueseq <- read.GenBank("NC_001477")
dengueseq
dengueseq$NC_001477
dengueseq <- read.GenBank("NC_001477", as.character = TRUE)
dengueseq
lizards_accession_numbers <- c("JF806202", "HM161150", "FJ356743", "JF806205", "JQ073190", 	"GU457971", "FJ356741", "JF806207", "JF806210", "AY662592", "AY662591","FJ356748", "JN112660",  "AY662594", "JN112661", "HQ876437", "HQ876434", "AY662590", "FJ356740","JF806214", "JQ073188", "FJ356749", "JQ073189", "JF806216", "AY662598", "JN112653", "JF806204","FJ356747", "FJ356744", "HQ876440", "JN112651", "JF806215","JF806209")
lizards_sequences <- read.GenBank(lizards_accession_numbers)
lizards_sequences
str(lizards_sequences)
names(lizards_sequences)
attributes(lizards_sequences)
attr(lizards_sequences, "species")
lizards_sequences_GenBank_IDs <- paste(attr(lizards_sequences, "species"), names(lizards_sequences), sep ="_RAG1_")
lizards_sequences_GenBank_IDs
write.dna(lizards_sequences, file ="lizard_fasta_1.fasta", format = "fasta", append = FALSE, nbcol = 6, colsep = " ", colw = 10)
#install.packages("rentrez")
library(rentrez)
lizard_search <- entrez_search(db="nuccore", term= "Basiliscus basiliscus[Organism]", retmax=40)
lizard_search
entrez_search(db="nuccore", term= "Basiliscus basiliscus[Organism] AND coi[GENE]", retmax=40)
lizard_seqs <- entrez_fetch(db="nuccore", id=lizard_search$ids, rettype="fasta")
lizard_seqs
write(lizard_seqs, "data/lizard_fasta_2.fasta", sep = "\n")
lizard_search_2 <- entrez_search(db="nuccore", term= "[Organism] AND RAG1[GENE]", retmax=40)
lizard_search_2
lizard_seqs_2 <- entrez_fetch(db="nuccore", id=lizard_search_2$ids, rettype="fasta")
lizard_search_2 <- entrez_search(db="nuccore", term= "Ornithorhynchus anatinus[Organism] AND RAG1[GENE]", retmax=10)
lizard_search_2
lizard_seqs_2 <- entrez_fetch(db="nuccore", id=lizard_search_2$ids, rettype="fasta")
lizard_search_2$ids
lizard_search_2 <- entrez_search(db="nuccore", term= "Ornithorhynchus anatinus[Organism] AND RAG1[GENE]", retmax=1)
lizard_search_2
lizard_search_2$ids
lizard_seqs_2 <- entrez_fetch(db="nuccore", id=lizard_search_2$ids, rettype="fasta")
lizard_seqs_2
write(lizard_seqs_2, "data/lizard_fasta_3.fasta", sep = "\n")
knitr::opts_chunk$set(echo = TRUE)
ui <- dashboardPage(
dashboardHeader(title = "Number Deaths in CDC"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018"),
selected = "2000"),
selectizeInput("y", "Select State", choices = NULL,
selected = NULL),
#  selectInput("z", "Select Admit Category", choices = c("Applicants", #"Admits", "Enrollees"),
#              selected = "Applicants")
), # close the first box
box(title = "CDC Deaths", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
library(tidyverse)
library(naniar)
cdc <- readr::read_csv("cdc-113-ICD10.csv")
clean_cdc <- cdc %>%
select(-c("State Code", "Year Code", "Ten-Year Age Groups", "Notes")) %>%
na.omit() %>%
na_if("Unreliable") %>%
rename(crude_rate= "Crude Rate",
state= "State",
year= "Year",
age_groups= "Ten-Year Age Groups Code",
cause_of_death= "ICD-10 113 Cause List",
cause_of_death_code= "ICD-10 113 Cause List Code",
deaths= "Deaths",
population= "Population")
clean_cdc
new_cause_of_death <- str_remove(clean_cdc$cause_of_death, "#")
clean_cdc2 <- clean_cdc %>%
mutate(cause_of_death = new_cause_of_death) %>%
mutate(state = as.factor(state))
clean_cdc2
ui <- dashboardPage(
dashboardHeader(title = "Number Deaths in CDC"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018"),
selected = "2000"),
selectizeInput("y", "Select State", choices = NULL,
selected = NULL),
#  selectInput("z", "Select Admit Category", choices = c("Applicants", #"Admits", "Enrollees"),
#              selected = "Applicants")
), # close the first box
box(title = "CDC Deaths", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
library(tidyverse)
library(naniar)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Number Deaths in CDC"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018"),
selected = "2000"),
selectizeInput("y", "Select State", choices = NULL,
selected = NULL),
#  selectInput("z", "Select Admit Category", choices = c("Applicants", #"Admits", "Enrollees"),
#              selected = "Applicants")
), # close the first box
box(title = "CDC Deaths", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
library(tidyverse)
library(naniar)
library(shiny)
library(shinydashboard)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(naniar)
library(shiny)
library(shinydashboard)
cdc <- readr::read_csv("cdc-113-ICD10.csv")
clean_cdc <- cdc %>%
select(-c("State Code", "Year Code", "Ten-Year Age Groups", "Notes")) %>%
na.omit() %>%
na_if("Unreliable") %>%
rename(crude_rate= "Crude Rate",
state= "State",
year= "Year",
age_groups= "Ten-Year Age Groups Code",
cause_of_death= "ICD-10 113 Cause List",
cause_of_death_code= "ICD-10 113 Cause List Code",
deaths= "Deaths",
population= "Population")
clean_cdc
clean_cdc %>% miss_var_summary
new_cause_of_death <- str_remove(clean_cdc$cause_of_death, "#")
clean_cdc2 <- clean_cdc %>%
mutate(cause_of_death = new_cause_of_death) %>%
mutate(state = as.factor(state))
clean_cdc2
ui <- dashboardPage(
dashboardHeader(title = "Number Deaths in CDC"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018"),
selected = "2000"),
selectizeInput("y", "Select State", choices = NULL,
selected = NULL),
#  selectInput("z", "Select Admit Category", choices = c("Applicants", #"Admits", "Enrollees"),
#              selected = "Applicants")
), # close the first box
box(title = "CDC Deaths", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
updateSelectizeInput(session, 'y',
choices = clean_cdc2$state,
server = TRUE)
output$plot <- renderPlot({
clean_cdc2 %>%
filter(year==input$x & state ==input$y) %>%
ggplot(aes(x=reorder(cause_of_death, deaths), y=deaths)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Cause_of_Death", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("seqinr")
library("ape")
dengueseq <- read.GenBank("NC_001477", as.character = TRUE)
dengueseq
write.fasta(names="DEN-1", sequences=dengueseq, file.out="data/den1.fasta")
dengue <- read.fasta(file = "data/den1.fasta")
dengueseq <- dengue[[1]]
length(dengueseq)
table(dengueseq)
GC(dengueseq)
mystery
mystery <- read.GenBank("FJ356740", as.character = TRUE)
mystery <- read.GenBank("FJ356740", as.character = TRUE)
mystery
length(mystery)
dengueseq <- read.GenBank("NC_001477", as.character = TRUE)
dengueseq
dengueseq
write.fasta(names="MYS-1", sequences=Mystery, file.out="data/mys1.fasta")
write.fasta(names="MYS-1", sequences=mystery, file.out="data/mys1.fasta")
mys <- read.fasta(file = "data/mys1.fasta")
mystery <- mys[[1]]
length(mystery)
table(mystery)
GC(myster)
GC(mystery)
ui <- dashboardPage(
dashboardHeader(title = "Number Deaths in CDC"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018"),
selected = "2000"),
selectizeInput("y", "Select State", choices = NULL,
selected = NULL),
#  selectInput("z", "Select Admit Category", choices = c("Applicants", #"Admits", "Enrollees"),
#              selected = "Applicants")
), # close the first box
box(title = "CDC Deaths", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
updateSelectizeInput(session, 'y',
choices = clean_cdc2$state,
server = TRUE)
output$plot <- renderPlot({
clean_cdc2 %>%
filter(year==input$x & state ==input$y) %>%
ggplot(aes(x=reorder(cause_of_death, deaths), y=deaths)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Cause_of_Death", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
new_cause_of_death <- str_remove(clean_cdc$cause_of_death, "#")
clean_cdc2 <- clean_cdc %>%
mutate(cause_of_death = new_cause_of_death) %>%
mutate(state = as.factor(state))
clean_cdc2
levels(state)
levels(clean_cdc2$state)
ui <- dashboardPage(
dashboardHeader(title = "Number Deaths in CDC"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018"),
selected = "2000"),
varSelectInput("y", "Select State", choices = levels(clean_cdc2$state),
selected = "Arizona"),
#  selectInput("z", "Select Admit Category", choices = c("Applicants", #"Admits", "Enrollees"),
#              selected = "Applicants")
), # close the first box
box(title = "CDC Deaths", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
ui <- dashboardPage(
dashboardHeader(title = "Number Deaths in CDC"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018"),
selected = "2000"),
selectInput("y", "Select State", choices = c(levels(clean_cdc2$state)),
selected = "Arizona"),
#  selectInput("z", "Select Admit Category", choices = c("Applicants", #"Admits", "Enrollees"),
#              selected = "Applicants")
), # close the first box
box(title = "CDC Deaths", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
clean_cdc2 %>%
filter(year==input$x & state ==input$y) %>%
ggplot(aes(x=reorder(cause_of_death, deaths), y=deaths)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Cause_of_Death", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Number Deaths in CDC"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018"),
selected = "2000"),
selectInput("y", "Select State", choices = c(levels(clean_cdc2$state)),
selected = "Arizona"),
#  selectInput("z", "Select Admit Category", choices = c("Applicants", #"Admits", "Enrollees"),
#              selected = "Applicants")
), # close the first box
box(title = "CDC Deaths", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
clean_cdc2 %>%
filter(year==input$x & state ==input$y) %>%
ggplot(aes(x=cause_of_death, y=deaths)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Cause_of_Death", y = "Number")
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
#COI sequences for 8 species of louse
louse <- read.alignment(system.file("sequences/louse.fasta", package = "seqinr"), format = "fasta")
louse$nam
#COI sequences for each louse's gopher host
gopher <- read.alignment(system.file("sequences/gopher.fasta", package = "seqinr"), format = "fasta")
gopher$nam
l.names <- readLines(system.file("sequences/louse.names", package = "seqinr"))
l.names
g.names <- readLines(system.file("sequences/gopher.names", package = "seqinr"))
g.names
louse.JC <- dist.dna(as.DNAbin(louse), model = "JC69")
gopher.JC <- dist.dna(as.DNAbin(gopher), model = "JC69")
l <- nj(louse.JC)
g <- nj(gopher.JC)
op <- par(no.readonly = TRUE)
g$tip.label <- paste(1:8, g.names)
l$tip.label <- paste(1:8, l.names)
layout(matrix(data = 1:2, nrow = 1, ncol = 2), width=c(1.4, 1))
par(mar=c(2,1,2,1))
plot(g, adj = 0.8, cex = 1.4, use.edge.length=FALSE,main = "gopher (host)", cex.main = 2)
plot(l,direction="l", use.edge.length=FALSE, cex = 1.4,main = "louse (parasite)", cex.main = 2)
louse.JC <- dist.dna(as.DNAbin(louse), model = "JC69")
gopher.JC <- dist.dna(as.DNAbin(gopher), model = "JC69")
l <- nj(louse.JC)
g <- nj(gopher.JC)
op <- par(no.readonly = TRUE)
g$tip.label <- paste(1:8, g.names)
l$tip.label <- paste(1:8, l.names)
layout(matrix(data = 1:2, nrow = 1, ncol = 2), width=c(1.4, 1))
par(mar=c(2,1,2,1))
plot(g, adj = 0.8, cex = 1.4, use.edge.length=FALSE,main = "gopher (host)", cex.main = 2)
plot(l,direction="l", use.edge.length=FALSE, cex = 1.4,main = "louse (parasite)", cex.main = 2)
par(op)
source("essai.r")
source("essai.r")
